// Code generated by fyne-theme-generator

package assets

import (
	"image/color"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/theme"
)

//Mytheme : Exported Custome Theme
type MyTheme struct{}

func (MyTheme) Color(c fyne.ThemeColorName, v fyne.ThemeVariant) color.Color {
	switch c {
	case theme.ColorNameBackground:
		return color.NRGBA{R: 0x24, G: 0x27, B: 0x2e, A: 0xff}
	case theme.ColorNameButton:
		return color.NRGBA{R: 0x24, G: 0x27, B: 0x2e, A: 0xff}
	case theme.ColorNameDisabledButton:
		return color.NRGBA{R: 0x26, G: 0x26, B: 0x26, A: 0xff}
	case theme.ColorNameDisabled:
		return color.NRGBA{R: 0xff, G: 0xff, B: 0xff, A: 0x42}
	case theme.ColorNameError:
		return color.NRGBA{R: 0xf4, G: 0x43, B: 0x36, A: 0xff}
	case theme.ColorNameFocus:
		return color.NRGBA{R: 0x21, G: 0x96, B: 0xf3, A: 0x7f}
	case theme.ColorNameForeground:
		return color.NRGBA{R: 0xff, G: 0xff, B: 0xff, A: 0xff}
	case theme.ColorNameHover:
		return color.NRGBA{R: 0xff, G: 0xff, B: 0xff, A: 0xf}
	case theme.ColorNameInputBackground:
		return color.NRGBA{R: 0x24, G: 0x27, B: 0x2e, A: 0x0}
	case theme.ColorNamePlaceHolder:
		return color.NRGBA{R: 0xb2, G: 0xb2, B: 0xb2, A: 0xff}
	case theme.ColorNamePressed:
		return color.NRGBA{R: 0xff, G: 0xff, B: 0xff, A: 0x66}
	case theme.ColorNamePrimary:
		return color.NRGBA{R: 0x42, G: 0x6c, B: 0x79, A: 0xff}
	case theme.ColorNameScrollBar:
		return color.NRGBA{R: 0x0, G: 0x0, B: 0x0, A: 0x26}
	case theme.ColorNameShadow:
		return color.NRGBA{R: 0x0, G: 0x0, B: 0x0, A: 0x66}
	default:
		return theme.DefaultTheme().Color(c, v)
	}
	// switch c {
	// case theme.ColorNameBackground:
	// 	return color.NRGBA{R: 0x45, G: 0x4b, B: 0x59, A: 0x83}
	// case theme.ColorNameButton:
	// 	return color.NRGBA{R: 0x37, G: 0x40, B: 0x3c, A: 0x0}
	// case theme.ColorNameDisabledButton:
	// 	return color.NRGBA{R: 0x26, G: 0x26, B: 0x26, A: 0xff}
	// case theme.ColorNameDisabled:
	// 	return color.NRGBA{R: 0xff, G: 0xff, B: 0xff, A: 0x42}
	// case theme.ColorNameError:
	// 	return color.NRGBA{R: 0xcd, G: 0x4f, B: 0x45, A: 0xff}
	// case theme.ColorNameFocus:
	// 	return color.NRGBA{R: 0x77, G: 0x6e, B: 0x6e, A: 0x7f}
	// case theme.ColorNameForeground:
	// 	return color.NRGBA{R: 0xff, G: 0xff, B: 0xff, A: 0xff}
	// case theme.ColorNameHover:
	// 	return color.NRGBA{R: 0xff, G: 0xff, B: 0xff, A: 0xf}
	// case theme.ColorNameInputBackground:
	// 	return color.NRGBA{R: 0x37, G: 0x40, B: 0x3c, A: 0x0}
	// case theme.ColorNamePlaceHolder:
	// 	return color.NRGBA{R: 0x41, G: 0x51, B: 0x53, A: 0xff}
	// case theme.ColorNamePressed:
	// 	return color.NRGBA{R: 0xff, G: 0xff, B: 0xff, A: 0x66}
	// case theme.ColorNamePrimary:
	// 	return color.NRGBA{R: 0x74, G: 0x9c, B: 0x9c, A: 0xff}
	// case theme.ColorNameScrollBar:
	// 	return color.NRGBA{R: 0x3e, G: 0x46, B: 0x48, A: 0x99}
	// case theme.ColorNameShadow:
	// 	return color.NRGBA{R: 0x0, G: 0x0, B: 0x0, A: 0x66}
	// default:
	// 	return theme.DefaultTheme().Color(c, v)
	// }
}

func (MyTheme) Font(s fyne.TextStyle) fyne.Resource {
	if s.Monospace {
		return fontRobotoMonoRegularTtf
	}
	if s.Bold {
		if s.Italic {
			return fontIBMPlexSansCondensedBoldItalicTtf
		}
		return fontIBMPlexSansCondensedBoldTtf
	}
	if s.Italic {
		return fontSimulaBookItalic651eMqBTtf
	}
	return fontSimulaBookImfTVa3Ttf
}

func (MyTheme) Icon(n fyne.ThemeIconName) fyne.Resource {
	return theme.DefaultTheme().Icon(n)
}

func (MyTheme) Size(s fyne.ThemeSizeName) float32 {
	switch s {
	case theme.SizeNameCaptionText:
		return 13
	case theme.SizeNameInlineIcon:
		return 18
	case theme.SizeNamePadding:
		return 5
	case theme.SizeNameScrollBar:
		return 12
	case theme.SizeNameScrollBarSmall:
		return 3
	case theme.SizeNameSeparatorThickness:
		return 0.75
	case theme.SizeNameText:
		return 15
	case theme.SizeNameInputBorder:
		return 0
	default:
		return theme.DefaultTheme().Size(s)
	}
}
